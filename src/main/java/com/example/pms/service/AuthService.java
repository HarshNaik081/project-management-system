package com.example.pms.service; import com.example.pms.model.ERole; import com.example.pms.model.Role; import com.example.pms.model.User; import com.example.pms.payload.LoginRequest; import com.example.pms.payload.SignupRequest; import com.example.pms.payload.JwtResponse; import com.example.pms.repository.RoleRepository; import com.example.pms.repository.UserRepository; import com.example.pms.security.JwtUtils; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import java.util.HashSet; import java.util.Set;
@Service public class AuthService { private final UserRepository userRepo; private final RoleRepository roleRepo; private final PasswordEncoder encoder; private final JwtUtils jwtUtils; public AuthService(UserRepository userRepo, RoleRepository roleRepo, PasswordEncoder encoder, JwtUtils jwtUtils){ this.userRepo=userRepo; this.roleRepo=roleRepo; this.encoder=encoder; this.jwtUtils=jwtUtils; } public JwtResponse authenticateUser(LoginRequest loginRequest){ User user = userRepo.findByUsername(loginRequest.getUsername()).orElseThrow(); if(!encoder.matches(loginRequest.getPassword(), user.getPassword())) throw new RuntimeException("Invalid creds"); String token = jwtUtils.generateJwtToken(user.getUsername()); JwtResponse resp = new JwtResponse(); resp.setToken(token); resp.setUsername(user.getUsername()); return resp; } public String registerUser(SignupRequest signUpRequest){ if(userRepo.existsByUsername(signUpRequest.getUsername())) throw new RuntimeException("Username taken"); if(userRepo.existsByEmail(signUpRequest.getEmail())) throw new RuntimeException("Email taken"); User user = new User(); user.setUsername(signUpRequest.getUsername()); user.setEmail(signUpRequest.getEmail()); user.setPassword(encoder.encode(signUpRequest.getPassword())); Set<Role> roles = new HashSet<>(); if(signUpRequest.getRole()==null){ Role userRole = roleRepo.findByName(ERole.ROLE_USER).orElseThrow(); roles.add(userRole); } else { for(String r: signUpRequest.getRole()){ if(r.equals("admin")){ Role adminRole = roleRepo.findByName(ERole.ROLE_ADMIN).orElseThrow(); roles.add(adminRole); } else { Role userRole = roleRepo.findByName(ERole.ROLE_USER).orElseThrow(); roles.add(userRole); } } } user.setRoles(roles); userRepo.save(user); return "User registered"; } }